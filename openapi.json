{
  "openapi": "3.1.0",
  "info": {
    "title": "Files API",
    "summary": "Store and retrieve files.",
    "description": "![Maintained by](https://img.shields.io/badge/Maintained%20by-MLOps%20Club-05998B?style=for-the-badge)\n\n| Helpful Links | Notes |\n| --- | --- |\n| [Course Homepage](https://mlops-club.org) | |\n| [Course Student Portal](https://courses.mlops-club.org) | |\n| [Course Materials Repo](https://github.com/mlops-club/python-on-aws-course.git) | `mlops-club/python-on-aws-course` |\n| [Course Reference Project Repo](https://github.com/mlops-club/cloud-course-project.git) | `mlops-club/cloud-course-project` |\n| [FastAPI Documentation](https://fastapi.tiangolo.com/) | |\n| [Learn to make \"badges\"](https://shields.io/) | Example: <img alt=\"Awesome Badge\" src=\"https://img.shields.io/badge/Awesome-\ud83d\ude0e-blueviolet?style=for-the-badge\"> |\n",
    "version": "v1"
  },
  "paths": {
    "/v1/files/{file_path}": {
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Upload File",
        "description": "## Upload a File\n\nUpload a file to the specified path. If a file already exists at the given path,\nit will be replaced with the new content.\n\n### Parameters\n- **file_path**: The destination path where the file should be stored\n- **file_content**: The file content to upload (multipart/form-data)\n\n### Response\n- **200 OK**: File was successfully updated (file already existed)\n- **201 Created**: File was successfully uploaded (new file created)\n\n### Example\n```bash\ncurl -X PUT \"https://api.example.com/v1/files/documents/report.pdf\"          -F \"file=@local-file.pdf\"\n```",
        "operationId": "Files-upload_file",
        "parameters": [
          {
            "name": "file_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[^<>:\\\"|?*\\x00-\\x1f]+$",
              "description": "Valid file path without invalid characters",
              "examples": [
                "documents/example.txt"
              ],
              "title": "File Path"
            },
            "description": "Valid file path without invalid characters"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_Files-upload_file"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutFileResponse"
                }
              }
            }
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutFileResponse"
                }
              }
            },
            "description": "Created"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Files"
        ],
        "summary": "Get File Metadata",
        "description": "## Get File Metadata\n\nRetrieve metadata information about a file without downloading the file content.\nThis is useful for checking if a file exists and getting its properties.\n\n### Parameters\n- **file_path**: The path to the file\n\n### Response Headers\n- **Content-Type**: The MIME type of the file\n- **Content-Length**: The size of the file in bytes\n- **Last-Modified**: The last modification date of the file\n\n### Status Codes\n- **200 OK**: File exists and metadata retrieved successfully\n- **404 Not Found**: File does not exist\n\n### Example\n```bash\ncurl -I \"https://api.example.com/v1/files/documents/report.pdf\"\n```\n\nNote: This endpoint returns only headers, no response body.",
        "operationId": "Files-get_file_metadata",
        "parameters": [
          {
            "name": "file_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[^<>:\\\"|?*\\x00-\\x1f]+$",
              "description": "Valid file path without invalid characters",
              "examples": [
                "documents/example.txt"
              ],
              "title": "File Path"
            },
            "description": "Valid file path without invalid characters"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "headers": {
              "Content-Type": {
                "description": "The [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types) of the file.",
                "example": "text/plain",
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "The size of the file in bytes.",
                "example": 512,
                "schema": {
                  "type": "integer"
                }
              },
              "Last-Modified": {
                "description": "The last modified date of the file.",
                "example": "Thu, 01 Jan 2022 00:00:00 GMT",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "404": {
            "description": "File not found for the given `file_path`."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get File",
        "description": "## Download a File\n\nDownload the content of a file stored at the specified path. The file is returned\nas a streaming response with the appropriate content type.\n\n### Parameters\n- **file_path**: The path to the file to download\n\n### Response\n- **200 OK**: File content streamed successfully\n- **404 Not Found**: File does not exist\n\n### Response Headers\n- **Content-Type**: The MIME type of the file\n- **Content-Length**: The size of the file in bytes\n\n### Example\n```bash\n# Download a file\ncurl \"https://api.example.com/v1/files/documents/report.pdf\"          -o \"downloaded-report.pdf\"\n\n# Download and view text file content\ncurl \"https://api.example.com/v1/files/logs/app.log\"\n```",
        "operationId": "Files-get_file",
        "parameters": [
          {
            "name": "file_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[^<>:\\\"|?*\\x00-\\x1f]+$",
              "description": "Valid file path without invalid characters",
              "examples": [
                "documents/example.txt"
              ],
              "title": "File Path"
            },
            "description": "Valid file path without invalid characters"
          }
        ],
        "responses": {
          "200": {
            "description": "The file content.",
            "content": {
              "application/json": {
                "schema": {}
              },
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "File not found for the given `file_path`."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete File",
        "description": "## Delete a File\n\nPermanently delete a file from the specified path. This operation cannot be undone.\n\n### Parameters\n- **file_path**: The path to the file to delete\n\n### Response\n- **204 No Content**: File deleted successfully\n- **404 Not Found**: File does not exist\n\n### Example\n```bash\ncurl -X DELETE \"https://api.example.com/v1/files/documents/old-report.pdf\"\n```\n\n**Warning**: This operation permanently removes the file and cannot be reversed.",
        "operationId": "Files-delete_file",
        "parameters": [
          {
            "name": "file_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[^<>:\\\"|?*\\x00-\\x1f]+$",
              "description": "Valid file path without invalid characters",
              "examples": [
                "documents/example.txt"
              ],
              "title": "File Path"
            },
            "description": "Valid file path without invalid characters"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "File not found for the given `file_path`."
          },
          "204": {
            "description": "File deleted successfully."
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List Files",
        "description": "## List Files\n\nRetrieve a paginated list of files stored in the system. Results can be filtered\nby directory and support pagination for efficient browsing of large file collections.\n\n### Query Parameters\n- **directory** (optional): Filter files by directory prefix\n- **page_size** (optional): Number of files to return per page (default: 100)\n- **page_token** (optional): Token for retrieving the next page of results\n\n### Response\nReturns a list of files with metadata including:\n- File path and name\n- Last modified timestamp\n- File size in bytes\n- Next page token (if more results available)\n\n### Example\n```bash\n# List all files\ncurl \"https://api.example.com/v1/files\"\n\n# List files in a specific directory\ncurl \"https://api.example.com/v1/files?directory=documents/\"\n\n# Get next page of results\ncurl \"https://api.example.com/v1/files?page_token=abc123\"\n```",
        "operationId": "Files-list_files",
        "parameters": [
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 1000,
                  "minimum": 10
                },
                {
                  "type": "null"
                }
              ],
              "default": 10,
              "title": "Page Size"
            }
          },
          {
            "name": "directory",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "",
              "title": "Directory"
            }
          },
          {
            "name": "page_token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Page Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFilesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/generated/{file_path}": {
      "post": {
        "tags": [
          "Generated Files"
        ],
        "summary": "AI Generated Files",
        "description": "Generate a File using AI.\n\nSupported file types:\n- **text**: `.txt`\n- **image**: `.png`, `.jpg`, `.jpeg`\n- **text-to-speech**: `.mp3`, `.opus`, `.aac`, `.flac`, `.wav`, `.pcm`\n\nNote: the generated file type is derived from the file_path extension. So the file_path must have\nan extension matching one of the supported file types in the list above.",
        "operationId": "Generated Files-generate_file_using_openai",
        "parameters": [
          {
            "name": "file_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Path"
            }
          },
          {
            "name": "prompt",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt"
            }
          },
          {
            "name": "file_type",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GeneratedFileType"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutGeneratedFileResponse"
                },
                "examples": {
                  "text": {
                    "value": {
                      "file_path": "path/to/file.txt",
                      "message": "New text file generated and uploaded at path: path/to/file.txt"
                    }
                  },
                  "image": {
                    "value": {
                      "file_path": "path/to/image.png",
                      "message": "New image file generated and uploaded at path: path/to/image.png"
                    }
                  },
                  "text-to-speech": {
                    "value": {
                      "file_path": "path/to/speech.mp3",
                      "message": "New Text-to-Speech file generated and uploaded at path: path/to/speech.mp3"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_Files-upload_file": {
        "properties": {
          "file_content": {
            "type": "string",
            "format": "binary",
            "title": "File Content"
          }
        },
        "type": "object",
        "required": [
          "file_content"
        ],
        "title": "Body_Files-upload_file"
      },
      "FileMetadata": {
        "properties": {
          "file_path": {
            "type": "string",
            "title": "File Path",
            "description": "The path of the file.",
            "example": "path/to/pyproject.toml"
          },
          "last_modified": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified",
            "description": "The last modified date of the file.",
            "example": "2025-01-25T00:00:00Z"
          },
          "size_bytes": {
            "type": "integer",
            "title": "Size Bytes",
            "description": "The size of the file in bytes.",
            "example": 512
          }
        },
        "type": "object",
        "required": [
          "file_path",
          "last_modified",
          "size_bytes"
        ],
        "title": "FileMetadata",
        "description": "Represents a file in the filesystem."
      },
      "GeneratedFileType": {
        "type": "string",
        "enum": [
          "text",
          "image",
          "text-to-speech"
        ],
        "title": "GeneratedFileType",
        "description": "The type of file generated by OpenAI."
      },
      "GetFilesResponse": {
        "properties": {
          "files": {
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            },
            "type": "array",
            "title": "Files"
          },
          "next_page_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Page Token"
          }
        },
        "type": "object",
        "required": [
          "files",
          "next_page_token"
        ],
        "title": "GetFilesResponse",
        "description": "Response for `GET /files`.",
        "example": {
          "files": [
            {
              "file_path": "path/to/pyproject.toml",
              "last_modified": "2025-01-25T00:00:00Z",
              "size_bytes": 512
            },
            {
              "file_path": "path/to/Makefile",
              "last_modified": "2025-01-25T01:00:00Z",
              "size_bytes": 201
            }
          ],
          "next_page_token": "abc123"
        }
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "PutFileResponse": {
        "properties": {
          "file_path": {
            "type": "string",
            "title": "File Path",
            "description": "The path of the created file.",
            "example": "uploads/document.pdf"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Success message for the file creation.",
            "example": "File uploaded successfully"
          }
        },
        "type": "object",
        "required": [
          "file_path",
          "message"
        ],
        "title": "PutFileResponse",
        "description": "Response for `PUT /files/:file_path`."
      },
      "PutGeneratedFileResponse": {
        "properties": {
          "file_path": {
            "type": "string",
            "title": "File Path",
            "description": "The path to the file.",
            "example": "path/to/file.txt"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "The message indicating the status of the operation.",
            "example": "New file generated and uploaded at path: path/to/file.txt"
          }
        },
        "type": "object",
        "required": [
          "file_path",
          "message"
        ],
        "title": "PutGeneratedFileResponse",
        "description": "Response model for `POST /v1/files/generated/:file_path`.",
        "examples": [
          {
            "value": {
              "file_path": "path/to/file.txt",
              "message": "New text file generated and uploaded at path: path/to/file.txt"
            }
          },
          {
            "value": {
              "file_path": "path/to/image.png",
              "message": "New image file generated and uploaded at path: path/to/image.png"
            }
          },
          {
            "value": {
              "file_path": "path/to/speech.mp3",
              "message": "New Text-to-Speech file generated and uploaded at path: path/to/speech.mp3"
            }
          }
        ]
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}